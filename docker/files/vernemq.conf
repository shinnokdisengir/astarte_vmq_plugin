## Set the maximum size for client IDs. MQTT v3.1 specifies a
## limit of 23 characters
## 
## Default: 100
## 
## Acceptable values:
##   - an integer
## Set to Astarte's actual maximum: 48 (realm) + 1 ("/") + 22 (device id)
max_client_id_size = 71

## The maximum number of QoS 1 or 2 messages that can be in the process of being
## transmitted simultaneously. This includes messages currently going through handshakes
## and messages that are being retried. Defaults to 20. Set to 0 for no maximum. If set
## to 1, this will guarantee in-order delivery of messages.
## Note: for MQTT v5, use receive_max_client/receive_max_broker to implement
## similar behaviour.
## 
## Default: 20
## 
## Acceptable values:
##   - an integer
##
max_inflight_messages = 20

## If a message is published with a QoS lower than the QoS of the subscription it is
## delivered to, VerneMQ can upgrade the outgoing QoS. This is a non-standard option.
## 
## Default: off
## 
## Acceptable values:
##   - on or off
# Astarte: useful for sending data without doing a lot of roundtrips
upgrade_outgoing_qos = on

## listener.max_connections is an integer or 'infinity' defining
## the maximum number of concurrent connections. This option can be overridden
## on the protocol level by:
## - listener.tcp.max_connections
## - listener.ssl.max_connections
## - listener.ws.max_connections
## - listener.wss.max_connections
## or on the listener level by:
## - listener.tcp.my_tcp_listener.max_connections
## - listener.ssl.my_ssl_listener.max_connections
## - listener.ws.my_ws_listener.max_connections
## - listener.wss.my_wss_listener.max_connections
## 
## Default: 10000
## 
## Acceptable values:
##   - an integer
##   - the text "infinity"
# Astarte: don't put a limit here. Instead, rely on autoscale.
listener.max_connections = infinity

# Reverse proxy listener
listener.tcp.revproxy.proxy_protocol = on
# FIXME: Enable when merged
#listener.tcp.revproxy.proxy_protocol_use_cn_as_username = on


## listener.http.default is the IP address and TCP port that
## the broker will bind to accept HTTP connections
## - listener.http.default = 0.0.0.0:8888
## This also works for SSL listeners:
## - listener.https.default= 0.0.0.0:8889
## 
## Default: 127.0.0.1:8888
## 
## Acceptable values:
##   - an IP/port pair, e.g. 127.0.0.1:10011
# Export the HTTP listener - we want to scrape metrics also for live probes.
listener.http.default = 0.0.0.0:8888


## Enable the $SYSTree Reporter.
## 
## Default: on
## 
## Acceptable values:
##   - on or off
## Astarte: we don't need this, disable not to drain resources.
systree_enabled = off

## The integer number of milliseconds between updates of the $SYS subscription hierarchy,
## which provides status information about the broker. If unset, defaults to 20 seconds.
## Set to 0 to disable publishing the $SYS hierarchy completely.
## 
## Default: 20000
## 
## Acceptable values:
##   - an integer
systree_interval = 0

# Astarte plugin
plugins.astarte_vmq_plugin = on
plugins.astarte_vmq_plugin.path = /opt/astarte_vmq_plugin
# Don't add any configuration option here - they'll be added by vernemq.sh, if necessary.